into=c('trial', 'subject', 'sample', 'replicate'))
setwd("~/projects/INT_ISA001")
library(dplyr)
library(ggplot2)
outputDir <- 'output'
o <- bind_rows(lapply(list.files(outputDir,
recursive = TRUE,
full.names = TRUE,
pattern = 'stdFragments.rds'), readRDS)) %>%
tidyr::separate(col='uniqueSample',
sep='~',
into=c('trial', 'subject', 'sample', 'replicate'))
d <- bind_rows(lapply(group_split(group_by(o, trial, subject, sample)), function(x){
z <- group_by(x, replicate, posid) %>%
summarise(reads = sum(reads)) %>%
ungroup() %>%
reshape2::melt() %>%
reshape2::dcast(replicate~posid)
z[is.na(z)] <- 0
r <- vegan::rarecurve(select(z, -replicate), step = 5)
n <- 0
bind_rows(lapply(r, function(x2){
n <<- n+1
data.frame(sample = x$sample[1], sampleRep = paste0(x$sample[1], '~', z[n,]$replicate[1]), x = attributes(x2)$Subsample, y = as.numeric(x2))
}))
}))
colors <- grDevices::colorRampPalette(RColorBrewer::brewer.pal(12, "Paired"))(n_distinct(d$sample))
p <- ggplot(d, aes(x, y, group = sampleRep, color = sample)) +
theme_bw() +
geom_line() +
scale_color_manual(values = colors) +
labs(x = 'Reads', y = 'Sites')
p
setwd("~/projects/SCID1")
setwd("~/projects/SCID1_repeat")
library(dplyr)
library(ggplot2)
outputDir <- 'output'
o <- bind_rows(lapply(list.files(outputDir,
recursive = TRUE,
full.names = TRUE,
pattern = 'stdFragments.rds'), readRDS)) %>%
tidyr::separate(col='uniqueSample',
sep='~',
into=c('trial', 'subject', 'sample', 'replicate'))
d <- bind_rows(lapply(group_split(group_by(o, trial, subject, sample)), function(x){
z <- group_by(x, replicate, posid) %>%
summarise(reads = sum(reads)) %>%
ungroup() %>%
reshape2::melt() %>%
reshape2::dcast(replicate~posid)
z[is.na(z)] <- 0
r <- vegan::rarecurve(select(z, -replicate), step = 5)
n <- 0
bind_rows(lapply(r, function(x2){
n <<- n+1
data.frame(sample = x$sample[1], sampleRep = paste0(x$sample[1], '~', z[n,]$replicate[1]), x = attributes(x2)$Subsample, y = as.numeric(x2))
}))
}))
colors <- grDevices::colorRampPalette(RColorBrewer::brewer.pal(12, "Paired"))(n_distinct(d$sample))
p <- ggplot(d, aes(x, y, group = sampleRep, color = sample)) +
theme_bw() +
geom_line() +
scale_color_manual(values = colors) +
labs(x = 'Reads', y = 'Sites')
setwd("~/projects/SCID1_repeat")
library(dplyr)
library(ggplot2)
outputDir <- 'output'
o <- bind_rows(lapply(list.files(outputDir,
recursive = TRUE,
full.names = TRUE,
pattern = 'stdFragments.rds'), readRDS)) %>%
tidyr::separate(col='uniqueSample',
sep='~',
into=c('trial', 'subject', 'sample', 'replicate'))
d <- bind_rows(lapply(group_split(group_by(o, trial, subject, sample)), function(x){
z <- group_by(x, replicate, posid) %>%
summarise(reads = sum(reads)) %>%
ungroup() %>%
reshape2::melt() %>%
reshape2::dcast(replicate~posid)
z[is.na(z)] <- 0
r <- vegan::rarecurve(select(z, -replicate), step = 5)
n <- 0
bind_rows(lapply(r, function(x2){
n <<- n+1
data.frame(sample = x$sample[1], sampleRep = paste0(x$sample[1], '~', z[n,]$replicate[1]), x = attributes(x2)$Subsample, y = as.numeric(x2))
}))
}))
colors <- grDevices::colorRampPalette(RColorBrewer::brewer.pal(12, "Paired"))(n_distinct(d$sample))
p <- ggplot(d, aes(x, y, group = sampleRep, color = sample)) +
theme_bw() +
geom_line() +
scale_color_manual(values = colors) +
labs(x = 'Reads', y = 'Sites')
p
setwd("~/projects/SCID1")
library(dplyr)
library(ggplot2)
outputDir <- 'output'
o <- bind_rows(lapply(list.files(outputDir,
recursive = TRUE,
full.names = TRUE,
pattern = 'stdFragments.rds'), readRDS)) %>%
tidyr::separate(col='uniqueSample',
sep='~',
into=c('trial', 'subject', 'sample', 'replicate'))
d <- bind_rows(lapply(group_split(group_by(o, trial, subject, sample)), function(x){
z <- group_by(x, replicate, posid) %>%
summarise(reads = sum(reads)) %>%
ungroup() %>%
reshape2::melt() %>%
reshape2::dcast(replicate~posid)
z[is.na(z)] <- 0
r <- vegan::rarecurve(select(z, -replicate), step = 5)
n <- 0
bind_rows(lapply(r, function(x2){
n <<- n+1
data.frame(sample = x$sample[1], sampleRep = paste0(x$sample[1], '~', z[n,]$replicate[1]), x = attributes(x2)$Subsample, y = as.numeric(x2))
}))
}))
colors <- grDevices::colorRampPalette(RColorBrewer::brewer.pal(12, "Paired"))(n_distinct(d$sample))
p <- ggplot(d, aes(x, y, group = sampleRep, color = sample)) +
theme_bw() +
geom_line() +
scale_color_manual(values = colors) +
labs(x = 'Reads', y = 'Sites')
p
?vegan::rarecurve
setwd("~/projects/Jones_CD8/230613_MN01490_0138_A000H5KVFH")
library(dplyr)
library(ggplot2)
outputDir <- 'output'
o <- bind_rows(lapply(list.files(outputDir,
recursive = TRUE,
full.names = TRUE,
pattern = 'stdFragments.rds'), readRDS)) %>%
tidyr::separate(col='uniqueSample',
sep='~',
into=c('trial', 'subject', 'sample', 'replicate'))
d <- bind_rows(lapply(group_split(group_by(o, trial, subject, sample)), function(x){
z <- group_by(x, replicate, posid) %>%
summarise(reads = sum(reads)) %>%
ungroup() %>%
reshape2::melt() %>%
reshape2::dcast(replicate~posid)
z[is.na(z)] <- 0
r <- vegan::rarecurve(select(z, -replicate), step = 5)
n <- 0
bind_rows(lapply(r, function(x2){
n <<- n+1
data.frame(sample = x$sample[1], sampleRep = paste0(x$sample[1], '~', z[n,]$replicate[1]), x = attributes(x2)$Subsample, y = as.numeric(x2))
}))
}))
colors <- grDevices::colorRampPalette(RColorBrewer::brewer.pal(12, "Paired"))(n_distinct(d$sample))
p <- ggplot(d, aes(x, y, group = sampleRep, color = sample)) +
theme_bw() +
geom_line() +
scale_color_manual(values = colors) +
labs(x = 'Reads', y = 'Sites')
p
setwd('/home/ubuntu/projects/Peranteau_AAV/data')
library(ShortRead)
o <- readFastq('merged_R2.fastq')
z <- o@sread
t <- sort(table(as.character(subseq(o, 1, 10))), decreasing = TRUE)[1:10]
t <- sort(table(as.character(subseq(o, 1, 10))), decreasing = TRUE)[1:10]
subseq(o, 1, 10)
t <- sort(table(as.character(subseq(o@sread, 1, 10))), decreasing = TRUE)[1:10]
t
setwd("~/projects/Peranteau_AAV")
# John K. Everett, PhD
# AAVengeR/demultipex.R
#
# This module demultiplexes paired-end reads based on barcode sequences found
# in the sampleData configuration file pointed to by the AAVengeR configuration file.
library(ShortRead)
library(readr)
library(parallel)
library(lubridate)
library(dplyr)
library(data.table)
configFile <- commandArgs(trailingOnly=TRUE)
configFile <- 'config.yml'
opt <- yaml::read_yaml(configFile)
source(file.path(opt$softwareDir, 'lib.R'))
setOptimalParameters()
if(! 'demultiplex_exportFASTQ' %in% names(opt)) opt$demultiplex_exportFASTQ <- FALSE
# The launch script creates (if missing) and writes to the output directory.
# File write permission issues should be caught before starting modules.
if(! dir.exists(file.path(opt$outputDir, opt$demultiplex_outputDir))) dir.create(file.path(opt$outputDir, opt$demultiplex_outputDir))
dir.create(file.path(opt$outputDir, opt$demultiplex_outputDir, 'seqChunks'))
dir.create(file.path(opt$outputDir, opt$demultiplex_outputDir, 'logs'))
dir.create(file.path(opt$outputDir, opt$demultiplex_outputDir, 'tmp'))
if(! file.exists(opt$demultiplex_sampleDataFile)){
write(c(paste(now(), '   Error - the sample configuration file could not be found')), file = file.path(opt$outputDir, opt$demultiplex_outputDir, 'log'), append = TRUE)
q(save = 'no', status = 1, runLast = FALSE)
}
write(c(paste(now(), '   Loading sample data')), file = file.path(opt$outputDir, opt$demultiplex_outputDir, 'log'), append = FALSE)
samples <- loadSamples()
nrow(samples) == 0
file.path(opt$outputDir, 'log')
'refGenome' %in% names(samples)
! all(sapply(unique(file.path(opt$softwareDir, 'data', 'blatDBs', paste0(samples$refGenome, '.2bit'))), file.exists))
'vectorFastaFile' %in% names(samples)
! all(sapply(unique(file.path(opt$softwareDir, 'data', 'vectors', samples$vectorFastaFile)), file.exists))
'leaderSeqHMM' %in% names(samples)
! 'adriftRead.linkerBarcode.start' %in% names(samples)
samples$adriftRead.linkerBarcode.start <- NA
samples$adriftRead.linkerBarcode.end   <- NA
samples$adriftRead.linkerRandomID.start <- NA
samples$adriftRead.linkerRandomID.end   <- NA
samples <- bind_rows(lapply(split(samples, 1:nrow(samples)), function(x){
Ns <- stringr::str_extract(x$adriftReadLinkerSeq, 'N+')
# Detecting Ns in the adrift linker and having adriftRead.linkerBarcode.start
# set to NA triggers the determination of positions.
if(! is.na(Ns) & is.na(x$adriftRead.linkerBarcode.start)){
o <- stringr::str_locate(x$adriftReadLinkerSeq, Ns)
x$adriftRead.linkerBarcode.start  <- 1
x$adriftRead.linkerBarcode.end    <- o[1,1] - 1
}
# Detecting Ns in the adrift linker and having adriftRead.linkerRandomID.start
# set to NA triggers the determination of positions.
if(! is.na(Ns) & is.na(x$adriftRead.linkerRandomID.start)){
o <- stringr::str_locate(x$adriftReadLinkerSeq, Ns)
x$adriftRead.linkerRandomID.start  <- o[1,1]
x$adriftRead.linkerRandomID.end    <- o[1,2]
}
x
}))
requiredColumns <- c("trial", "subject", "sample", "replicate",
"adriftReadLinkerSeq", "index1Seq", "refGenome", "vectorFastaFile", "flags")
! all(requiredColumns %in% names(samples))
any(grepl('\\s|~|\\||\\.', paste0(samples$trial, samples$subject, samples$sample, samples$replicate)))
write('Error -- spaces, tildas (~), pipes (|), and dots (.) are reserved characters and can not be used in the trial, subject, sample, or replicate sample configuration columns.',
file = file.path(opt$outputDir, 'log'), append = TRUE)
setwd("~/projects/Weinberger_latency_free_HIV")
setwd("~/projects/Weinberger_latency_free_HIV")
library(dplyr)
library(IntegrationFeatureHeatmap)  # https://github.com/agmcfarland/IntegrationFeatureHeatmap
library(ggplot2)
library(factoextra)
library(FactoMineR)
library(reshape2)
library(vegan)
options(scipen = 999)
chromosome_lengths <- readr::read_csv('hg38_chromo_lengths.csv')
# Read in recovered integration sites, create position ids, and apply a mild filter.
sites1 <- readr::read_tsv('intSites.tsv')
sites1$posid <- paste0(sites1$chromosome, sites1$strand, sites1$position)
sites1 <- subset(sites1, reads > 1)
# Read in gamma-retroviral samples from published studies.
sites2 <- readr::read_tsv('ADA.tsv')
sites2$subject <- paste('ADA', sites2$subject)
sites2$externalSampleID <- as.character(sites2$externalSampleID)
sites3 <- readr::read_tsv('SCID_GTSP5545.tsv')
sites3$subject <- paste('SCID', sites3$subject)
sites3$externalSampleID <- as.character(sites3$externalSampleID)
sitesX <- bind_rows(sites2, sites3)
# Prepare experimental sites for heatmap generation.
s1 <- select(sites1, chromosome, position, subject, internalSampleID)
names(s1) <- c('seqname', 'start', 'subject', 'sample')
s1$end <- s1$start
s1$width <- 1
s1$strand <- '*'
s1$mid <- s1$start
s1$type <- 'insertion'
s1$heatmap_group <- s1$subject
s1 <- select(s1, -subject, -sample)
# Prepare reference sites for heatmap generation.
s2 <- select(sitesX, chromosome, position, subject, internalSampleID)
names(s2) <- c('seqname', 'start', 'subject', 'sample')
s2$end <- s2$start
s2$width <- 1
s2$strand <- '*'
s2$mid <- s2$start
s2$type <- 'insertion'
s2$heatmap_group <- s2$subject
s2 <- select(s2, -subject, -sample)
cleanUpMapNames <- function(x){
names(x) <- sub('\\.rds', '', names(x))
names(x) <- sub('\\.RData', '', names(x))
names(x) <- sub('hg38\\.', '', names(x))
names(x) <- sub('\\.1000$', ' 1K', names(x))
names(x) <- sub('\\.10000$', ' 10K', names(x))
names(x) <- sub('\\.15000$', ' 15K', names(x))
names(x) <- sub('\\.20000$', ' 20K', names(x))
names(x) <- sub('\\.25000$', ' 25K', names(x))
x
}
s <- bind_rows(s1, s2)
# generate random-matched dataframes
random_match_df <- IntegrationFeatureHeatmap::aavenger_sites_random_match(
aavenger_sites = s,
chromosome_lengths = chromosome_lengths,
random_seed_value = 10,
match_row_number_modifier = 3
)
combined_df <- rbind(s, random_match_df)
# Genomic heatmap.
#-------------------------------------------------------------------------------
# test each integration site for overlap in each feature at each given overlap
trackPath <- '/home/ubuntu/data/heatMapTracks/genomicMarkers'
combined_overlap_test_results_genomic_ranges <- cleanUpMapNames(IntegrationFeatureHeatmap::test_for_overlaps(
matched_aavenger_sites_df = combined_df,
list_of_feature_files = list.files(trackPath, pattern = "\\.(rds|RData)$", full.names = TRUE),
overlap_ranges_to_test = c(1000, 10000)
))
df_roc <- format_hot_roc_result(hotroc_compare_insertion_to_match(combined_overlap_test_results_genomic_ranges))
df_roc_pvals <- df_roc %>% dplyr::select(feature_window, heatmap_group, p_value, sig_p_value)
df_roc <- df_roc %>% dplyr::select(feature_window, heatmap_group,  ROC_value)
df_roc$heatmap_group <- gsub('\\.', '_', df_roc$heatmap_group)
df_roc_pvals$heatmap_group <- gsub('\\.', '_', df_roc_pvals$heatmap_group)
df_roc$heatmap_group <- factor(df_roc$heatmap_group,
levels = c('C1_Top', 'C2_Top', 'C3_Top', 'C4_Top', 'LF1_Top', 'LF2_Top', 'LF3_Top', 'LF4_Top',
'C1_Bottom', 'C2_Bottom', 'C3_Bottom', 'C4_Bottom', 'LF1_Bottom', 'LF2_Bottom',
'LF3_Bottom', 'LF4_Bottom', 'ADA_p402', 'ADA_p404', 'ADA_p410', 'SCID_pP10'))
heatmap <-
ggplot() +
geom_tile(data = df_roc, aes(x = heatmap_group, y = feature_window, fill = ROC_value), color='black', linewidth = 0.75) +
geom_text(data = df_roc_pvals, aes(x = heatmap_group, y = feature_window, label = sig_p_value)) +
theme_classic() +
theme(axis.title = element_blank(),
panel.background = element_blank(),
axis.line = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 12),
axis.text.y = element_text(size = 12)) +
scale_fill_gradientn(colours = c("blue", "grey90", "red"),
na.value = "transparent",
breaks = c(0, 0.25, 0.5, 0.75, 1),
labels = c(0, 0.25, 0.5, 0.75, 1),
limits = c(0, 1)) +
scale_y_discrete(expand = c(0, 0)) +
scale_x_discrete(expand = c(0, 0)) +
labs(fill = "ROC")
ggsave(heatmap, file = 'heatMap1.png', units = 'in', height = 8, width = 9)
# Epigenomic heatmap
#-------------------------------------------------------------------------------
trackPath <- '/home/ubuntu/data/heatMapTracks/epiGenetricMarkers'
combined_overlap_test_results_genomic_ranges <- cleanUpMapNames(IntegrationFeatureHeatmap::test_for_overlaps(
matched_aavenger_sites_df = combined_df,
list_of_feature_files = list.files(trackPath, pattern = "\\.(rds|RData)$", full.names = TRUE),
overlap_ranges_to_test = c(10000)
))
df_roc <- format_hot_roc_result(hotroc_compare_insertion_to_match(combined_overlap_test_results_genomic_ranges))
df_roc_pvals <- df_roc %>% dplyr::select(feature_window, heatmap_group, p_value, sig_p_value)
df_roc <- df_roc %>% dplyr::select(feature_window, heatmap_group,  ROC_value)
df_roc$heatmap_group <- gsub('\\.', '_', df_roc$heatmap_group)
df_roc_pvals$heatmap_group <- gsub('\\.', '_', df_roc_pvals$heatmap_group)
df_roc$heatmap_group <- factor(df_roc$heatmap_group,
levels = c('C1_Top', 'C2_Top', 'C3_Top', 'C4_Top', 'LF1_Top', 'LF2_Top', 'LF3_Top', 'LF4_Top',
'C1_Bottom', 'C2_Bottom', 'C3_Bottom', 'C4_Bottom', 'LF1_Bottom', 'LF2_Bottom',
'LF3_Bottom', 'LF4_Bottom', 'ADA_p402', 'ADA_p404', 'ADA_p410', 'SCID_pP10'))
heatmap <-
ggplot() +
geom_tile(data = df_roc, aes(x = heatmap_group, y = feature_window, fill = ROC_value), color='black', linewidth = 0.75) +
geom_text(data = df_roc_pvals, aes(x = heatmap_group, y = feature_window, label = sig_p_value)) +
theme_classic() +
theme(axis.title = element_blank(),
panel.background = element_blank(),
axis.line = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 12),
axis.text.y = element_text(size = 12)) +
scale_fill_gradientn(colours = c("blue", "grey90", "red"),
na.value = "transparent",
breaks = c(0, 0.25, 0.5, 0.75, 1),
labels = c(0, 0.25, 0.5, 0.75, 1),
limits = c(0, 1)) +
scale_y_discrete(expand = c(0, 0)) +
scale_x_discrete(expand = c(0, 0)) +
labs(fill = "ROC")
ggsave(heatmap, file = 'heatMap2.png', units = 'in', height = 12, width = 8.5)
# Create ROCs for PCA
#-------------------------------------------------------------------------------
trackPath <- '/home/ubuntu/data/heatMapTracks/allMarkers'
combined_overlap_test_results_genomic_ranges <- cleanUpMapNames(IntegrationFeatureHeatmap::test_for_overlaps(
matched_aavenger_sites_df = combined_df,
list_of_feature_files = list.files(trackPath, pattern = "\\.(rds|RData)$", full.names = TRUE),
overlap_ranges_to_test = c(1000, 10000)
))
df_roc <- format_hot_roc_result(hotroc_compare_insertion_to_match(combined_overlap_test_results_genomic_ranges))
df_roc_pvals <- df_roc %>% dplyr::select(feature_window, heatmap_group, p_value, sig_p_value)
df_roc <- df_roc %>% dplyr::select(feature_window, heatmap_group,  ROC_value)
df_roc$heatmap_group <- gsub('\\.', '_', df_roc$heatmap_group)
df_roc_pvals$heatmap_group <- gsub('\\.', '_', df_roc_pvals$heatmap_group)
df_roc$heatmap_group <- factor(df_roc$heatmap_group,
levels = c('C1_Top', 'C2_Top', 'C3_Top', 'C4_Top', 'LF1_Top', 'LF2_Top', 'LF3_Top', 'LF4_Top',
'C1_Bottom', 'C2_Bottom', 'C3_Bottom', 'C4_Bottom', 'LF1_Bottom', 'LF2_Bottom',
'LF3_Bottom', 'LF4_Bottom', 'ADA_p402', 'ADA_p404', 'ADA_p410', 'SCID_pP10'))
o <- dcast(df_roc[!grepl('ADA|SCID', df_roc$heatmap_group),], heatmap_group~feature_window, value.var = 'ROC_value')
o$g1 <- ifelse(grepl('^C', o$heatmap_group), 'Control', 'LatFree')
o$g2 <- ifelse(grepl('Top', o$heatmap_group), 'Top', 'Bottom')
o <- relocate(o, g1, g2, .after = 'heatmap_group')
o$g1 <- factor(o$g1)
o$g2 <- factor(o$g2)
head(o)
readr::write_tsv(o, 'ROC_values_used_for_PCA.tsv')
setwd("~/projects/AAVengeR_ITRscramble")
setwd("~/AAVengeR")
library(dplyr)
library(stringr)
library(readr)
library(Biostrings)
# This script reads in a vector sequence and a second FASTA formatted file
# and aligns the vector against the FASTA file. Significant alignments to the
# second file are masked with lowercase letters and written out to a second
# vector file.
#
# Already filtered with repeatMasker
# RepeatMasker -s -xsmall -species "Mus musculus" -dir tmp vector.ff
vectorIN <- 'data/vectors/Peranteau-AAV8-CAG-GFP.fasta'
vectorOUT <- 'data/vectors/Peranteau-AAV8-CAG-GFP.filtered.fasta'
blastBD <- '/home/ubuntu/projects/Peranteau_AAV/guideRegions.fasta'
tmpDir <- '~/tmp'
minPercentID <- 93
minAlnLength <- 15
invisible(file.remove(list.files(tmpDir, full.names = TRUE)))
v <- readLines(vectorIN)
v.id <- v[1]
v <- paste0(v[2:length(v)], collapse = '') # Assume Fasta format. Can not use read fasta functions or will lose lower case filtering.
system(paste0('makeblastdb -dbtype nucl -in ', blastBD, ' -out ', file.path(tmpDir, 'db')))
system(paste0('blastn -dust no -soft_masking false -word_size 7 -evalue 100 -outfmt 6 -query ',
vectorIN, ' -db ', file.path(tmpDir, 'db'), ' -out ', file.path(tmpDir, 'blastOut')))
if(file.info(file.path(tmpDir, 'blastOut'))$size > 0){
b <- read.table(file.path(tmpDir, 'blastOut'), sep = '\t', header = FALSE)
names(b) <- c('qname', 'sseqid', 'pident', 'length', 'mismatch', 'gapopen', 'qstart', 'qend', 'sstart', 'send', 'evalue', 'bitscore')
b <- filter(b, length >= minAlnLength & pident >= minPercentID & gapopen <= 1)
if(nrow(b) > 0){
invisible(lapply(split(b, 1:nrow(b)), function(x){
message(tolower(substr(v, x$qstart, x$qend)))
substr(v, x$qstart, x$qend) <<- tolower(substr(v, x$qstart, x$qend))
}))
}
}
write(c(v.id, v), file = vectorOUT)
library(dplyr)
library(stringr)
library(readr)
library(Biostrings)
# This script reads in a vector sequence and a second FASTA formatted file
# and aligns the vector against the FASTA file. Significant alignments to the
# second file are masked with lowercase letters and written out to a second
# vector file.
#
# Already filtered with repeatMasker
# RepeatMasker -s -xsmall -species "Mus musculus" -dir tmp vector.ff
vectorIN <- 'data/vectors/Peranteau-AAV8-CAG-GFP.fasta'
vectorOUT <- 'data/vectors/Peranteau-AAV8-CAG-GFP.filtered.fasta'
blastBD <- '/home/ubuntu/projects/Peranteau_AAV/guideRegions.fasta'
tmpDir <- '~/tmp'
minPercentID <- 93
minAlnLength <- 15
invisible(file.remove(list.files(tmpDir, full.names = TRUE)))
v <- readLines(vectorIN)
v.id <- v[1]
v <- paste0(v[2:length(v)], collapse = '') # Assume Fasta format. Can not use read fasta functions or will lose lower case filtering.
system(paste0('makeblastdb -dbtype nucl -in ', blastBD, ' -out ', file.path(tmpDir, 'db')))
system(paste0('blastn -dust no -soft_masking false -word_size 7 -evalue 100 -outfmt 6 -query ',
vectorIN, ' -db ', file.path(tmpDir, 'db'), ' -out ', file.path(tmpDir, 'blastOut')))
if(file.info(file.path(tmpDir, 'blastOut'))$size > 0){
b <- read.table(file.path(tmpDir, 'blastOut'), sep = '\t', header = FALSE)
names(b) <- c('qname', 'sseqid', 'pident', 'length', 'mismatch', 'gapopen', 'qstart', 'qend', 'sstart', 'send', 'evalue', 'bitscore')
b <- filter(b, length >= minAlnLength & pident >= minPercentID & gapopen <= 1)
if(nrow(b) > 0){
invisible(lapply(split(b, 1:nrow(b)), function(x){
message(tolower(substr(v, x$qstart, x$qend)))
substr(v, x$qstart, x$qend) <<- tolower(substr(v, x$qstart, x$qend))
}))
}
}
write(c(v.id, v), file = vectorOUT)
123622200-3
91743976-3
library(dplyr)
library(RMySQL)
inputFile <- '/home/ubuntu/projects/Weinberger_TIPs/data/metaData'
outputFile <- '/home/ubuntu/projects/Weinberger_TIPs/data/sampleData.tsv'
m <- readr::read_csv(inputFile)
invisible(sapply(dbListConnections(MySQL()), dbDisconnect))
dbConn  <- dbConnect(MySQL(), group='specimen_management')
gtsp <- dbGetQuery(dbConn, 'select * from gtsp')
dbDisconnect(dbConn)
m$SampleName <- sub('_u[35]$', '', m$SampleName)
samples <- sub('\\-\\d+$', '', m$SampleName)
reps <- as.integer(unlist(lapply(stringr::str_extract_all(m$SampleName, '\\d+$'), '[', 1)))
reps
subjects <- gtsp[match(samples, gtsp$SpecimenAccNum),]$Patient
subjects <- ifelse(is.na(subjects), samples, subjects)
subjects
s)
trial <- gtsp[match(samples, gtsp$SpecimenAccNum),]$Trial
trial <- ifelse(is.na(trial), 'Control', trial)
trial
hmms <- ifelse(grepl('u5', m$uniqueRegion, ignore.case = TRUE), 'HIV1_1-100_U5.hmm', 'HIV1_1-100_U3_RC.hmm')
flags <- ifelse(grepl('u5', m$uniqueRegion, ignore.case = TRUE), 'IN_u5', 'IN_u3')
hmms
m$vectorSeq <- 'HXB2.fasta'
r <- tibble(trial = trial,
subject = subjects,
sample = samples,
replicate = reps,
index1Seq = m$barcode,
refGenome = ifelse(grepl('Positive', subject, ignore.case = TRUE), 'sacCer3', 'hg38'),
adriftReadLinkerSeq = m$linker,
vectorFastaFile = m$vectorSeq,
leaderSeqHMM = hmms,
flags = flags)
write.table(r, file = outputFile, sep='\t', col.names = TRUE, row.names = FALSE, quote = FALSE)
View(r)
View(r)
reticulate::repl_python()
